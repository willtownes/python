'''
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
'''

def triangle(n):
    '''returns the first n triangle numbers in a list'''
    a = range(1,n+1)
    for i in range(len(a)):
        if i == 0:
            a[i] = 1
        else:
            a[i] = a[i-1]+a[i]
    return a

def triangle2(n,t):
    '''returns the (n+1)th triangle number. Given the nth triangle number t'''
    return sum(range(1,n+1))

def factor(n):
    '''returns a list of all unique factors of the number n.'''
    factors = range(2,1+n/2)
    return [1]+[i for i in factors if n%i == 0].append(n)

def countfactors(n):
    '''returns the number of unique divisors of the number n, where n > 1.'''
    counter = 1
    sqrt = int(n**.5) + 1
    factors = range(2,sqrt)
    for i in factors:
        if n%i == 0:
            counter += 1
        else:
            pass
    return counter*2 #have to double it because so far we only counted up to the sqrt mark.

trial = [2,3]
while countfactors(trial[1]) <= 500: #this generates next triangle number from current triangle number.
    trial[0]+= 1
    trial[1] = sum(trial)
print(trial[1])
    
